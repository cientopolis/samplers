//apply plugin: 'groovyx.grooid.groovy-android'

import groovy.json.JsonSlurper

buildscript {
    dependencies {
        classpath files("../samplersclassgenerator.jar")
    }
}

task samplers_config {
    println "SAMPLERS START -----------------------------------------------------------------------"

    def inputFile = new File("SamplersConfig.json")
    def json = new JsonSlurper().parseText(inputFile.text)

    println "START Printing the JSon file (for debugging purposes) -----------------------"
    // Print the JSon file for debugging purposes
    // PROJECT
    println json.project.app_path
    println json.project.package_name

    // APPLICATION
    println json.application.title
    println json.application.welcomeMessage
    json.application.googleMaps_API_KEY
    println json.application.mainHelpFileName
    println json.application.networkConfiguration.url
    println json.application.networkConfiguration.paramName

    // WORKFLOW
    println json.workflow.actionLabel
    println json.workflow.tasks


    json.workflow.tasks.each { task ->
        println "   " + task.type
        println "   " + task.title

        task.options.each { option ->
            println "       " + option
        }
    }
    println "END Printing the JSon file ----------------------------"

    // Project constants
    def app_path = json.project.app_path
    def package_name = json.project.package_name
    def manifest_path = "app/src/main/"
    def strings_path = "app/src/main/res/values/"
    def raw_path = "app/src/main/res/raw/"

    // Check if exists MAIN ACTIVITY
    File main_activity_file = new File(app_path+"MyMainSamplersActivity.java")
    if (!main_activity_file.exists()) {


        def class_generator = new org.cientopolis.samplers.SamplersClassGenerator(package_name, manifest_path, strings_path, raw_path);
        // Set Main Help
        if (json.application.mainHelpFileName != null) {
            class_generator.setMainHelpFileName(json.application.mainHelpFileName);
        }

        // Set Google Maps API Key
        if (json.application.googleMaps_API_KEY != null) {
            class_generator.setGoogleMaps_API_KEY(json.application.googleMaps_API_KEY)
            println "Google maps API KEY added"
        } else
            println "No google maps API KEY found"

        // Workflow
        def stepClassGenerator;
        json.workflow.steps.eachWithIndex { step, i ->
            switch (step.type) {
                case "Information":
                    stepClassGenerator = new org.cientopolis.samplers.InformationStepClassGenerator(step.id, step.nextStepId, step.text)
                    break

                case "MultipleSelect":
                    stepClassGenerator = new org.cientopolis.samplers.MultipleSelectStepClassGenerator(step.id, step.nextStepId, step.title)

                    step.options.each { option ->
                        stepClassGenerator.addOptionToSelect(option.id, option.text)
                    }

                    break

                case "SelectOne":
                    stepClassGenerator = new org.cientopolis.samplers.SelectOneStepClassGenerator(step.id, step.title)

                    step.options.each { option ->
                        stepClassGenerator.addOptionToSelect(option.id, option.text, option.nextStepId)
                    }

                    break

                case "Photo":
                    // TODO add functionality to overlay image
                    stepClassGenerator = new org.cientopolis.samplers.PhotoStepClassGenerator(step.id, step.nextStepId, step.text, "")
                    break

                case "Location":
                    stepClassGenerator = new org.cientopolis.samplers.LocationStepClassGenerator(step.id, step.nextStepId, step.text)
                    break

                case "InsertText":
                    stepClassGenerator = new org.cientopolis.samplers.InsertTextStepClassGenerator(step.id, step.nextStepId, step.text, step.sampleText, step.maxLength, step.inputType, step.optional)
                    break

                case "InsertDate":
                    stepClassGenerator = new org.cientopolis.samplers.InsertDateStepClassGenerator(step.id, step.nextStepId, step.text)
                    break

                case "InsertTime":
                    stepClassGenerator = new org.cientopolis.samplers.InsertTimeStepClassGenerator(step.id, step.nextStepId, step.text)
                    break

                case "Sound":
                    stepClassGenerator = new org.cientopolis.samplers.SoundRecordStepClassGenerator(step.id, step.nextStepId, step.text)
                    break

                default:
                    stepClassGenerator = null;
                    break
            }

            if (stepClassGenerator != null) {
                // Set Help File
                if (step.helpFileName != null) {
                    stepClassGenerator.setHelpFile(step.helpFileName)
                }

                // Add the step
                class_generator.addStep(stepClassGenerator)
            }


        }

        def activity_name = "MyMainSamplersActivity"
        def welcomeMessage = json.application.welcomeMessage
        def net_config_url = json.application.networkConfiguration.url
        def net_config_paramName = json.application.networkConfiguration.paramName

        class_generator.generateMainActivity(app_path, activity_name, welcomeMessage, net_config_url, net_config_paramName)
    }
    else {
        println "MyMainSamplersActivity.java already exists."
    }


    println "SAMPLERS END -------------------------------------------------------------------------"
}
