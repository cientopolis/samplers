//apply plugin: 'groovyx.grooid.groovy-android'

import groovy.json.JsonSlurper

task samplers_config {
    println "SAMPLERS START ---------------------"

    def inputFile = new File("SamplersConfig.json")
    def json = new JsonSlurper().parseText(inputFile.text)

    // Print the JSon file for debugging purposes
    // PROJECT
    println json.project.app_path
    println json.project.package_name

    // APLICATION
    println json.aplication.title
    println json.aplication.wellcomeMessage

    // WORKFLOW
    println json.workflow.actionLabel
    println json.workflow.tasks


    json.workflow.tasks.each { task ->
        println "   " + task.type
        print "   " + task.title
        println " : " + task.options

        task.options.each { option ->
            println "       " + option
        }
    }

    // Project constants
    def app_path = json.project.app_path
    def package_name = json.project.package_name
    def manifest_path = "app/src/main/"

    // MAIN ACTIVITY
    File main_activity_file = new File(app_path+"MyMainSamplersActivity.java")
    if (!main_activity_file.exists()) {
        main_activity_file.text = "package " + package_name + "; \n"
        main_activity_file.text += "import android.os.Bundle; \n"
        main_activity_file.text += "import android.content.Intent; \n"
        main_activity_file.text += "import org.cientopolis.samplers.ui.SamplersMainActivity; \n"
        main_activity_file.text += "import org.cientopolis.samplers.network.NetworkConfiguration; \n"

        main_activity_file.text += "public class MyMainSamplersActivity extends SamplersMainActivity { \n"
        // onCreate
        main_activity_file.text += "@Override \n"
        main_activity_file.text += "protected void onCreate(Bundle savedInstanceState) { \n"
        main_activity_file.text += "    super.onCreate(savedInstanceState); \n"

        // Network Configuration
        main_activity_file.text += "    NetworkConfiguration.setURL(\"" + json.aplication.networkConfiguration.url + "\"); \n"
        main_activity_file.text += "    NetworkConfiguration.setPARAM_NAME(\"" + json.aplication.networkConfiguration.paramName + "\"); \n"

        main_activity_file.text += "    lb_main_titulo.setText(\"" + json.aplication.wellcomeMessage + "\"); \n"

        main_activity_file.text += "} \n"

        // workflow
        main_activity_file.text += "@Override \n"
        main_activity_file.text += "protected Workflow getWorkflow(){ \n"
        main_activity_file.text += "    Workflow workflow = new Workflow(); \n"


            json.workflow.tasks.each { task ->
                switch (task.type) {
                    case "Information":
                        // TODO renombrar la variable optionsToSelect xq si hay dos Task del mismo tipo va a dar error de variable repetida
                        take_sample_activity_file.text += "    String textToShow = \"" + task.text + "\"; \n"

                        // TODO poner en el archivo de Strings y tomarlo de ahi
                        take_sample_activity_file.text += "    workflow.addStep(new InformationStep(textToShow)); \n"
                        break

                    case "MultipleSelect":
                        // Opciones para el multi select
                        // TODO renombrar la variable optionsToSelect xq si hay dos Task del mismo tipo va a dar error de variable repetida
                        take_sample_activity_file.text += "    ArrayList<SelectOption> optionsToSelect = new ArrayList<SelectOption>(); \n"

                        task.options.each { option ->
                            take_sample_activity_file.text += "    optionsToSelect.add(new SelectOption(" + option.id + ",\"" + option.text + "\", false)); \n"

                            // TODO poner en el archivo de Strings y tomarlo de ahi
                            //optionsToSelect.add(new MultipleSelectOption(getResources().getString(R.string.step_3_param_1), false));
                        }
                        take_sample_activity_file.text += "    workflow.addStep(new MultipleSelectStep(optionsToSelect)); \n"
                        break

                    case "SelectOne":
                        // Opciones para el select one
                        // TODO renombrar la variable optionsToSelect xq si hay dos Task del mismo tipo va a dar error de variable repetida
                        take_sample_activity_file.text += "    ArrayList<SelectOption> optionsToSelect2 = new ArrayList<SelectOption>(); \n"

                        task.options.each { option ->
                            take_sample_activity_file.text += "    optionsToSelect2.add(new SelectOption(" + option.id + ",\"" + option.text + "\",false)); \n"

                            // TODO poner en el archivo de Strings y tomarlo de ahi
                            // optionsToSelect2.add(new MultipleSelectOption(getResources().getString(R.string.step_5_param_1),false));
                        }

                        take_sample_activity_file.text += "    workflow.addStep(new SelectOneStep(optionsToSelect2)); \n"
                        break

                    case "Photo":
                        // TODO renombrar la variable optionsToSelect xq si hay dos Task del mismo tipo va a dar error de variable repetida
                        take_sample_activity_file.text += "    String photoInstructions = \"" + task.text + "\"; \n"

                        // TODO add functionality
                        //take_sample_activity_file.text += "    String image = \""+task.image+"\"; \n"
                        take_sample_activity_file.text += "    String image = \"\"; \n"

                        // TODO poner en el archivo de Strings y tomarlo de ahi
                        take_sample_activity_file.text += "    workflow.addStep(new PhotoStep(photoInstructions, image)); \n"
                        break
                }
            }


        main_activity_file.text += "    return workflow; \n"
        main_activity_file.text += "} \n"


        main_activity_file.text += "} \n"


        // add the activity to the manifest file

        def main_activity_manifest = "<activity\n" +
                "        android:name=\"MyMainSamplersActivity\"\n" +
                "        android:label=\"@string/app_name\"\n" +
                "        android:theme=\"@style/AppTheme\">\n" +
                "        <intent-filter>\n" +
                "            <action android:name=\"android.intent.action.MAIN\" />\n" +
                "            <category android:name=\"android.intent.category.LAUNCHER\" />\n" +
                "        </intent-filter>\n" +
                "    </activity>"

        File manifest_file = new File(manifest_path+"AndroidManifest.xml")
        manifest_file.text = manifest_file.text.replace("</application>", main_activity_manifest + "</application>")

    }
    else {
        println "MyMainSamplersActivity.java already exists."
    }

    // TAKE SAMPLE ACTIVITY
    File take_sample_activity_file = new File(app_path+"MyTakeSampleActivity.java")
    if (!take_sample_activity_file.exists()) {
        take_sample_activity_file.text = "package " + package_name + "; \n"
        take_sample_activity_file.text += "import android.os.Bundle; \n"
        take_sample_activity_file.text += "import org.cientopolis.samplers.ui.take_sample.TakeSampleActivity; \n"
        take_sample_activity_file.text += "import org.cientopolis.samplers.model.*; \n"
        take_sample_activity_file.text += "import java.util.ArrayList; \n"

        take_sample_activity_file.text += "public class MyTakeSampleActivity extends TakeSampleActivity { \n"
        take_sample_activity_file.text += "@Override \n"
        take_sample_activity_file.text += "protected void onCreate(Bundle savedInstanceState) { \n"
        take_sample_activity_file.text += "    super.onCreate(savedInstanceState); \n"




        take_sample_activity_file.text += "} \n"
        take_sample_activity_file.text += "} \n"
    }
    else {
        println "MyTakeSampleActivity.java already exists."
    }


    println "SAMPLERS END -----------------------"
}
