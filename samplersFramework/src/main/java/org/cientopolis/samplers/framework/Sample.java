package org.cientopolis.samplers.framework;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Xavier on 07/02/2017.
 * A Sample is a collection of {@link StepResult} generated by each {@link Step} in the {@link Workflow}
 */

public class Sample implements Serializable {

    private Long id;
    private List<StepResult> steps;
    private Date startDateTime;
    private Date endDateTime;
    private boolean sent;
    private Map<String,String> customParams;

    /**
     * Default constructor.
     *
     * @return A new instance of {@link Sample}.
     */
    public Sample(){
        startDateTime = new Date();
        steps = new ArrayList<>();
        sent = false;
        customParams = new HashMap<>();
    }

    /**
     * Adds a {@link StepResult} to the list.
     *
     * @param stepResult The {@link StepResult} to add.
     */
    public void addStepResult(StepResult stepResult) {
        steps.add(stepResult);
    }

    /**
     * Returns the list of the {@link StepResult} that conform the Sample.
     *
     * @return The list of the {@link StepResult}.
     */
    public List<StepResult> getStepResults() {
        return steps;
    }

    /**
     * Returns the start timestamp of the sample.
     * By default it is setted in {@link Sample#Sample()} but you can change it.
     * Used with {@link Sample#getEndDateTime()} you can calculate the time it took the user to take the sample.
     *
     * @return The start timestamp of the sample.
     */
    public Date getStartDateTime() {
        return startDateTime;
    }

    /**
     * Sets the start timestamp of the sample
     *
     * @param startDateTime The timestamp to set.
     */
    public void setStartDateTime(Date startDateTime) {
        this.startDateTime = startDateTime;
    }

    /**
     * Returns the end timestamp of the sample.
     * Used with {@link Sample#getStartDateTime()} you can calculate the time it took the user to take the sample.
     *
     * @return The end timestamp of the sample.
     */
    public Date getEndDateTime() {
        return endDateTime;
    }

    /**
     * Sets the end timestamp of the sample
     *
     * @param endDateTime The timestamp to set.
     */
    public void setEndDateTime(Date endDateTime) {
        this.endDateTime = endDateTime;
    }

    /**
     * Returns the id of the sample.
     *
     * @return The id of the sample.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the end id of the sample
     *
     * @param id The id to set.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns if the sample is sent to the server.
     *
     * @return True if of the sample is sent to the server, False otherwise.
     */
    public boolean isSent() {
        return sent;
    }

    /**
     * Marks the sample as sent to the server
     *
     */
    public void setSent(){
        sent = true;
    }

    @Override
    public String toString() {
        return "Sample{" +
                "id=" + id +
                ", startDateTime=" + startDateTime +
                ", endDateTime=" + endDateTime +
                ", sent=" + sent +
                ", steps=" + steps +
                '}';
    }

    /**
     * Adds a custom param to the Sample
     * Associates the specified value (@param paraValue) with the specified key (@param paramName) in the customParams map.
     * If the map previously contained a mapping for the key, the old value is replaced.
     *
     * @param paramName the key with which the specified value is to be associated
     * @param paraValue the value to be associated with the specified key
     */
    public void setCustomParam(String paramName, String paraValue){
        customParams.put(paramName, paraValue);
    }

    /**
     * Adds a map of custom params to the Sample
     * Copies all of the mappings from the specified map to the customParams map.
     * These mappings will replace any mappings that the customParams map had for any of the keys currently in the specified map.
     * @param customParams mappings to be stored in the customParams map
     */
    public void setCustomParams(Map<String,String> customParams){
        this.customParams.putAll(customParams);
    }

    /**
     * Retrieves a previously added custom param from the Sample
     * Returns the value to which the specified key (@param paramName) is mapped, or null if the customParams map contains no mapping for the key.
     * @param paramName the key whose associated value is to be returned
     * @return the value to which the specified key is mapped, or null if the customParams map contains no mapping for the key
     */
    public String getCustomParam(String paramName) {
        return customParams.get(paramName);
    }
}
